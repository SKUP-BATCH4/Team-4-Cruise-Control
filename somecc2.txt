/*
 * File:   cc.c
 * Author: admin
 *
 * Created on October 11, 2022, 11:25 AM
 */

// PIC18F458 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1H
#pragma config OSC = HS         // Oscillator Selection bits (HS oscillator)
#pragma config OSCS = OFF       // Oscillator System Clock Switch Enable bit (Oscillator system clock switch option is disabled (main oscillator is source))

// CONFIG2L
#pragma config PWRT = OFF       // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOR = OFF        // Brown-out Reset Enable bit (Brown-out Reset disabled)
#pragma config BORV = 25        // Brown-out Reset Voltage bits (VBOR set to 2.5V)

// CONFIG2H
#pragma config WDT = OFF        // Watchdog Timer Enable bit (WDT disabled (control is placed on the SWDTEN bit))
#pragma config WDTPS = 128      // Watchdog Timer Postscale Select bits (1:128)

// CONFIG4L
#pragma config STVR = OFF       // Stack Full/Underflow Reset Enable bit (Stack Full/Underflow will not cause Reset)
#pragma config LVP = OFF        // Low-Voltage ICSP Enable bit (Low-Voltage ICSP disabled)

// CONFIG5L
#pragma config CP0 = OFF        // Code Protection bit (Block 0 (000200-001FFFh) not code protected)
#pragma config CP1 = OFF        // Code Protection bit (Block 1 (002000-003FFFh) not code protected)
#pragma config CP2 = OFF        // Code Protection bit (Block 2 (004000-005FFFh) not code protected)
#pragma config CP3 = OFF        // Code Protection bit (Block 3 (006000-007FFFh) not code protected)

// CONFIG5H
#pragma config CPB = OFF        // Boot Block Code Protection bit (Boot Block (000000-0001FFh) not code protected)
#pragma config CPD = OFF        // Data EEPROM Code Protection bit (Data EEPROM not code protected)

// CONFIG6L
#pragma config WRT0 = OFF       // Write Protection bit (Block 0 (000200-001FFFh) not write protected)
#pragma config WRT1 = OFF       // Write Protection bit (Block 1 (002000-003FFFh) not write protected)
#pragma config WRT2 = OFF       // Write Protection bit (Block 2 (004000-005FFFh) not write protected)
#pragma config WRT3 = OFF       // Write Protection bit (Block 3 (006000-007FFFh) not write protected)

// CONFIG6H
#pragma config WRTC = OFF       // Configuration Register Write Protection bit (Configuration registers (300000-3000FFh) not write protected)
#pragma config WRTB = OFF       // Boot Block Write Protection bit (Boot Block (000000-0001FFh) not write protected)
#pragma config WRTD = OFF       // Data EEPROM Write Protection bit (Data EEPROM not write protected)

// CONFIG7L
#pragma config EBTR0 = OFF      // Table Read Protection bit (Block 0 (000200-001FFFh) not protected from Table Reads executed in other blocks)
#pragma config EBTR1 = OFF      // Table Read Protection bit (Block 1 (002000-003FFFh) not protected from Table Reads executed in other blocks)
#pragma config EBTR2 = OFF      // Table Read Protection bit (Block 2 (004000-005FFFh) not protected from Table Reads executed in other blocks)
#pragma config EBTR3 = OFF      // Table Read Protection bit (Block 3 (006000-007FFFh) not protected from Table Reads executed in other blocks)

// CONFIG7H
#pragma config EBTRB = OFF      // Boot Block Table Read Protection bit (Boot Block (000000-0001FFh) not protected from Table Reads executed in other blocks)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#define _XTAL_FREQ 20000000

//declarations 
unsigned int data;
unsigned int addr;
unsigned int actual_speed=30;
unsigned int reference_speed=80;
unsigned int can_msg[4];
unsigned int write(unsigned int, unsigned int);
unsigned int read(unsigned int);


//system initialization
void sysinit() {
    INTCONbits.GIE = 1;
    INTCONbits.PEIE = 1;
}


//CAN Initialization
void caninit() {
   TRISBbits.RB2 = 0; //RB2 is for transmit
    TRISBbits.RB3 = 1; //RB3 is for receive
     
    CANCON=0x80;
    
    while (CANSTAT!=0x00) {
        BRGCON1 = 0xC1;
        BRGCON2 = 0xAE;
        BRGCON3 = 0x45;
        CIOCON = 0x02;
        CANCON = 0x00;
       
    }
}






//for external interrupt using switch
//void interrupt external(){
//    if(INTCONbits.INT0IF==1){
//       LATAbits.LA0=~LATAbits.LA0;
//        
//        INTCONbits.INT0IF = 0;
//    }
//}




//unsigned int interr(){
// INTCONbits.INT0IE=1;
// 
// 
//}

//unsigned int receive(){
//
//}

//unsigned int transmit(){
//
//}

//void transmit(void) {
//    CANCON = 0x00;
//
//    TXB0SIDH = 0x14;
//    TXB0SIDL = 0x00;
//    TXB0DLC = 0x08;
//
//    TXB0D0 = 0x01;
//    TXB0D1 = 0x02;
//    TXB0D2 = 0x03;
//    TXB0D3 = 0x04;
//    TXB0D4 = 0x05;
//    TXB0D5 = 0x06;
//    TXB0D6 = 0x07;
//    TXB0D7 = 0x08;
//
//    TXB0CONbits.TXREQ = 1;
//
//}


//unsigned int filter(){
//  RXF0SIDL = 0x00;
//      RXF0SIDL = 0x00;
//      
//      __delay_ms(1000);
//    CANCON = 0x0C;   
//}
//
//unsigned int mask(){
////CANCON = 0x80;
////    
////      RXM0SIDL =  RXB0SIDH; 
////      RXM0SIDL =  RXB0SIDL;
//}

//unsigned int filter() {
//    RXF0SIDH = 0x14;
//    RXF0SIDL = 0x00;
//}
//
//unsigned int mask() {
//    RXM0SIDH = 0x14;
//    RXM0SIDL = 0x00;
//}

 unsigned int rec_speed()//CAN READ FUNCTION 
{
      CANCON = 0x80;
    
      RXM0SIDL =  RXB0SIDH; //MASK
      RXM0SIDL =  RXB0SIDL;
      
      RXF0SIDL = 0x00;
      RXF0SIDL = 0x00; //FILTER
   
    CANCON = 0x0C;   
    can_msg[0] =  RXB0D0;          
    can_msg[1] = RXB0DLC;  
    can_msg[2] = RXB0SIDL;     
    can_msg[3] = RXB0SIDH; 
    RXB0CON = 0X00;
    CANCON=0x00;
    unsigned int can_rec =  can_msg[0];
    return can_rec;
}
 
 
unsigned int CC_status(){
TRISAbits.RA0=0; 
    TRISBbits.RB0=0;
    LATA=0;
    while(1){
        if(PORTBbits.RB0==0){
            LATAbits.LA0=1;
        }else if(PORTBbits.RB0==1){
            LATAbits.LA0=0;
        }
    }}


void main(){
    sysinit();
   caninit();
    INTCONbits.GIE=1;
     INTCONbits.PEIE=1;
      INTCON2bits.RBPU=1;
    
   
            CC_status();
        rec_speed();
    
    }
